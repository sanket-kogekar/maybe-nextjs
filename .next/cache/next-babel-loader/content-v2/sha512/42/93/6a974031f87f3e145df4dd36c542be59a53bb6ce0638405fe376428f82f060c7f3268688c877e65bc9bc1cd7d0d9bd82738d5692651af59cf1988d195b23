{"ast":null,"code":"import _defineProperty from \"C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\KogoKing\\\\entrepreneur\\\\github\\\\maybe-finance\\\\code-challenge-nextjs\\\\pages\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/layout\";\nimport { getNames, getIataList, getCountries, getCities } from \"../hooks/use-api-data\";\n// import Filters from '../components/Filters'\n//\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\"; //\n\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nvar Page = function Page() {\n  _s();\n\n  var airports; //= useApiData<Airport[]>(\"/api/airports\", []);\n\n  var airportNames = getNames(\"/api/names\", []);\n  var airportIataList = getIataList(\"/api/iata-list\", []);\n  var countries = getCountries(\"/api/countries\", []);\n  var cities = getCities(\"/api/cities\", [], null); //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\n\n  var c = getCountries(\"/api/countries\", []);\n  console.log(\"c\", c); // const countries = [...new Map(c.map(item => [item[name], item])).values()]\n\n  var initialState = {\n    name: \"\",\n    iata: \"\",\n    country: \"\",\n    city: \"\"\n  };\n  var theme = createMuiTheme({\n    breakpoints: {\n      values: {\n        xs: 0,\n        sm: 450,\n        md: 600,\n        lg: 900,\n        xl: 1200,\n        tablet: 1024\n      }\n    }\n  });\n\n  var _useState = useState(initialState),\n      filterObject = _useState[0],\n      setFilterObject = _useState[1];\n\n  console.log(\"filterObject\", filterObject);\n\n  var resetFilters = function resetFilters() {\n    setFilterObject(initialState);\n  };\n\n  var _useState2 = useState(cities),\n      cityOptions = _useState2[0],\n      setCityOptions = _useState2[1];\n\n  useEffect(function () {\n    if (!!filterObject && !!filterObject.country) {\n      //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\n      var newOptions = [];\n      cities.map(function (item) {\n        console.log(\"item\", item);\n        console.log(\"item.country === filterObject.country\", item.country === filterObject.country);\n\n        if (item.country === filterObject.country) {\n          console.log(\"from IF\", {\n            name: item.name,\n            country: item.country\n          });\n          newOptions.push({\n            name: item.name,\n            country: item.country\n          }); // return {\n          //   name: item.name,\n          //   country: item.country\n          // }\n        }\n      });\n      console.log(\"newOptions\", newOptions);\n      setCityOptions(newOptions);\n    }\n  }, [filterObject]); // const updateCitiesList = (country) =>{\n  //   if(!!cityOptions && cityOptions.length > 0){\n  //     let newOptions = cityOptions.filter((option) => {\n  //       return option.country === country\n  //     })\n  //     setCityOptions(newOptions)\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl\",\n      children: \"\\xA0\\xA0Code Challenge: Airports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"name\",\n              options: airportNames,\n              getOptionLabel: function getOptionLabel(option) {\n                return option.name;\n              },\n              style: {\n                width: 300\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"Name\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, _this);\n              },\n              onChange: function onChange(event, newValue) {\n                setFilterObject(_objectSpread(_objectSpread({}, filterObject), newValue));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"iata\",\n              options: airportIataList,\n              getOptionLabel: function getOptionLabel(option) {\n                return option.name;\n              },\n              style: {\n                width: 300\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"IATA\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 19\n                }, _this);\n              },\n              onChange: function onChange(event, newValue) {\n                setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                  iata: newValue.name\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"country\",\n              options: countries,\n              getOptionLabel: function getOptionLabel(option) {\n                return option.name;\n              },\n              style: {\n                width: 300\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"Country\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 19\n                }, _this);\n              },\n              onChange: function onChange(event, newValue) {\n                setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                  country: newValue.name\n                })); //updateCitiesList(newValue.name)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"city\" //options={cities}\n              ,\n              options: cityOptions,\n              getOptionLabel: function getOptionLabel(option) {\n                return option.name;\n              },\n              style: {\n                width: 300\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"City\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 19\n                }, _this);\n              },\n              onChange: function onChange(event, newValue) {\n                setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                  city: newValue.name\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 9\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"default\",\n              fullWidth: true,\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: function onClick() {\n                resetFilters();\n              },\n              fullWidth: true,\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-10 text-xl\",\n      children: \"\\xA0\\xA0List of Airports (Sorted A-Z):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!!airports && airports.map(function (airport) {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/airports/\".concat(airport.iata.toLowerCase()),\n          className: \"mt-5 flex items-center shadow p-5 border\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [airport.name, \", \", airport.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ml-auto text-mono\",\n            children: airport.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, _this)]\n        }, airport.iata, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Page, \"THRtUzHCoAMq+aur0VkHxz1Sd6Y=\");\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/pages/index.tsx"],"names":["React","useState","useEffect","Layout","getNames","getIataList","getCountries","getCities","TextField","Autocomplete","Grid","Button","createMuiTheme","ThemeProvider","Page","airports","airportNames","airportIataList","countries","cities","c","console","log","initialState","name","iata","country","city","theme","breakpoints","values","xs","sm","md","lg","xl","tablet","filterObject","setFilterObject","resetFilters","cityOptions","setCityOptions","newOptions","map","item","push","padding","option","width","params","event","newValue","airport","toLowerCase"],"mappings":"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","sourcesContent":["import { NextPage } from \"next\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport useApiData, {\r\n  getNames,\r\n  getIataList,\r\n  getCountries,\r\n  getCities,\r\n} from \"../hooks/use-api-data\";\r\nimport Airport from \"../types/airport\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\nimport City from \"../types/city\";\r\nimport Country from \"../types/country\";\r\n// import Filters from '../components/Filters'\r\n//\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst Page: NextPage = () => {\r\n  let airports; //= useApiData<Airport[]>(\"/api/airports\", []);\r\n  const airportNames = getNames<AirportName[]>(\"/api/names\", []);\r\n  const airportIataList = getIataList<AirportIata[]>(\"/api/iata-list\", []);\r\n  const countries = getCountries<Country[]>(\"/api/countries\", []);\r\n  const cities = getCities<City[]>(\"/api/cities\", [], null);\r\n  //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\r\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\r\n  const c = getCountries<Country[]>(\"/api/countries\", []);\r\n  console.log(\"c\", c);\r\n  // const countries = [...new Map(c.map(item => [item[name], item])).values()]\r\n\r\n  const initialState = {\r\n    name: \"\",\r\n    iata: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n  };\r\n\r\n  const theme = createMuiTheme({\r\n    breakpoints: {\r\n      values: {\r\n        xs: 0,\r\n        sm: 450,\r\n        md: 600,\r\n        lg: 900,\r\n        xl: 1200,\r\n        tablet: 1024,\r\n      },\r\n    },\r\n  });\r\n\r\n  const [filterObject, setFilterObject] = useState(initialState);\r\n  console.log(\"filterObject\", filterObject);\r\n\r\n  const resetFilters = () => {\r\n    setFilterObject(initialState);\r\n  };\r\n\r\n  const [cityOptions, setCityOptions] = useState(cities);\r\n\r\n  useEffect(() => {\r\n    if (!!filterObject && !!filterObject.country) {\r\n      //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\r\n      let newOptions = [];\r\n      cities.map((item) => {\r\n        console.log(\"item\", item);\r\n        console.log(\r\n          \"item.country === filterObject.country\",\r\n          item.country === filterObject.country\r\n        );\r\n        if (item.country === filterObject.country) {\r\n          console.log(\"from IF\", {\r\n            name: item.name,\r\n            country: item.country,\r\n          });\r\n          newOptions.push({\r\n            name: item.name,\r\n            country: item.country,\r\n          });\r\n          // return {\r\n          //   name: item.name,\r\n          //   country: item.country\r\n          // }\r\n        }\r\n      });\r\n      console.log(\"newOptions\", newOptions);\r\n      setCityOptions(newOptions);\r\n    }\r\n  }, [filterObject]);\r\n\r\n  // const updateCitiesList = (country) =>{\r\n  //   if(!!cityOptions && cityOptions.length > 0){\r\n  //     let newOptions = cityOptions.filter((option) => {\r\n  //       return option.country === country\r\n  //     })\r\n  //     setCityOptions(newOptions)\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <Layout>\r\n      <h1 className=\"text-2xl\">&nbsp;&nbsp;Code Challenge: Airports</h1>\r\n      <br />\r\n      <hr />\r\n      <div style={{ padding: \"15px\" }}>\r\n        <ThemeProvider theme={theme}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"name\"\r\n                options={airportNames}\r\n                getOptionLabel={(option) => option.name}\r\n                style={{ width: 300 }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Name\" variant=\"outlined\" />\r\n                )}\r\n                onChange={(event: any, newValue: AirportName | null) => {\r\n                  setFilterObject({ ...filterObject, ...newValue });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"iata\"\r\n                options={airportIataList}\r\n                getOptionLabel={(option) => option.name}\r\n                style={{ width: 300 }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"IATA\" variant=\"outlined\" />\r\n                )}\r\n                onChange={(event: any, newValue: AirportIata | null) => {\r\n                  setFilterObject({ ...filterObject, iata: newValue.name });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"country\"\r\n                options={countries}\r\n                getOptionLabel={(option) => option.name}\r\n                style={{ width: 300 }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n                )}\r\n                onChange={(event: any, newValue: Country | null) => {\r\n                  setFilterObject({ ...filterObject, country: newValue.name });\r\n                  //updateCitiesList(newValue.name)\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"city\"\r\n                //options={cities}\r\n                options={cityOptions}\r\n                getOptionLabel={(option) => option.name}\r\n                style={{ width: 300 }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n                )}\r\n                onChange={(event: any, newValue: City | null) => {\r\n                  setFilterObject({ ...filterObject, city: newValue.name });\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <br />\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={9}></Grid>\r\n            <Grid item xs={1}>\r\n              <Button variant=\"contained\" color=\"default\" fullWidth>\r\n                Reset\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  resetFilters();\r\n                }}\r\n                fullWidth\r\n              >\r\n                Search\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </ThemeProvider>\r\n      </div>\r\n      <hr />\r\n      {/*  */}\r\n      {/*  */}\r\n      <h2 className=\"mt-10 text-xl\">\r\n        &nbsp;&nbsp;List of Airports (Sorted A-Z):\r\n      </h2>\r\n      <div>\r\n        {!!airports &&\r\n          airports.map((airport) => (\r\n            <a\r\n              href={`/airports/${airport.iata.toLowerCase()}`}\r\n              key={airport.iata}\r\n              className=\"mt-5 flex items-center shadow p-5 border\"\r\n            >\r\n              <div>\r\n                {airport.name}, {airport.city}\r\n              </div>\r\n              <div className=\"ml-auto text-mono\">{airport.country}</div>\r\n            </a>\r\n          ))}\r\n        <br />\r\n        <br />\r\n        {/* {!airports && (\r\n          <h3>&nbsp;&nbsp;Please Click 'Search' to view Available Airports!</h3>\r\n        )} */}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}