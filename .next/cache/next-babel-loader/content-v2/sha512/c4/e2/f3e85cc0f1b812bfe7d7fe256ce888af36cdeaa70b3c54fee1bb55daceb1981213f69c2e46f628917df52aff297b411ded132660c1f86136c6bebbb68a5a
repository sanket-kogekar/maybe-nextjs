{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\KogoKing\\\\entrepreneur\\\\github\\\\maybe-finance\\\\code-challenge-nextjs\\\\pages\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/layout\";\nimport { getNames, getIataList, getCountries, getCities } from \"../hooks/use-api-data\";\n// import Filters from '../components/Filters'\n//\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { useForm, FormProvider } from \"react-hook-form\"; //\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport Autocomplete from \"./../components/Autocomplete\"; //\n\nconst Page = () => {\n  let airports; //= useApiData<Airport[]>(\"/api/airports\", []);\n\n  const airportNames = getNames(\"/api/names\", []);\n  const airportIataList = getIataList(\"/api/iata-list\", []);\n  const countries = getCountries(\"/api/countries\", []);\n  const cities = getCities(\"/api/cities\", [], null); //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\n\n  const c = getCountries(\"/api/countries\", []);\n  console.log(\"c\", c); // const countries = [...new Map(c.map(item => [item[name], item])).values()]\n\n  const initialState = {\n    name: \"\",\n    iata: \"\",\n    country: \"\",\n    city: \"\"\n  };\n  const {\n    0: filterObject,\n    1: setFilterObject\n  } = useState(initialState);\n  console.log(\"filterObject\", filterObject);\n\n  const resetFilters = () => {\n    setFilterObject(initialState);\n  };\n\n  const {\n    0: cityOptions,\n    1: setCityOptions\n  } = useState(cities);\n  useEffect(() => {\n    if (!!filterObject && !!filterObject.country) {\n      //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\n      let newOptions = [];\n      cities.map(item => {\n        console.log(\"item\", item);\n        console.log(\"item.country === filterObject.country\", item.country === filterObject.country);\n\n        if (item.country === filterObject.country) {\n          console.log(\"from IF\", {\n            name: item.name,\n            country: item.country\n          });\n          newOptions.push({\n            name: item.name,\n            country: item.country\n          }); // return {\n          //   name: item.name,\n          //   country: item.country\n          // }\n        }\n      });\n      console.log(\"newOptions\", newOptions);\n      setCityOptions(newOptions);\n    }\n  }, [filterObject]); // const updateCitiesList = (country) =>{\n  //   if(!!cityOptions && cityOptions.length > 0){\n  //     let newOptions = cityOptions.filter((option) => {\n  //       return option.country === country\n  //     })\n  //     setCityOptions(newOptions)\n  //   }\n  // }\n  //\n\n  const form = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      age: \"\",\n      gender: \"male\",\n      hobbies: [\"cooking\", \"coding\"]\n    }\n  });\n\n  const onSubmit = data => console.log(data);\n\n  const onError = error => console.log(error); //\n\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl\",\n      children: \"\\xA0\\xA0Code Challenge: Airports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(FormProvider, _objectSpread(_objectSpread({}, form), {}, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: form.handleSubmit(onSubmit, onError),\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: /*#__PURE__*/_jsxDEV(Autocomplete //id=\"name\"\n              , {\n                name: \"name\",\n                options: airportNames,\n                getOptionLabel: option => option.name,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"Name\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 21\n                }, this),\n                onChange: (event, newValue) => {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), newValue));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: /*#__PURE__*/_jsxDEV(Autocomplete //name=\"iata\"\n              , {\n                options: airportIataList,\n                getOptionLabel: option => option.name,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"IATA\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 21\n                }, this),\n                onChange: (event, newValue) => {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    iata: newValue.name\n                  }));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                name: \"country\",\n                options: countries,\n                getOptionLabel: option => option.name,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"Country\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 21\n                }, this),\n                onChange: (event, newValue) => {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    country: newValue.name\n                  })); //updateCitiesList(newValue.name)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                name: \"city\" //options={cities}\n                ,\n                options: cityOptions,\n                getOptionLabel: option => option.name,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  label: \"City\",\n                  variant: \"outlined\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 21\n                }, this),\n                onChange: (event, newValue) => {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    city: newValue.name\n                  }));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 9\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 1,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"default\",\n                fullWidth: true,\n                children: \"Reset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 2,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: () => {\n                  resetFilters();\n                },\n                fullWidth: true,\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-10 text-xl\",\n      children: \"\\xA0\\xA0List of Airports (Sorted A-Z):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!!airports && airports.map(airport => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/airports/${airport.iata.toLowerCase()}`,\n        className: \"mt-5 flex items-center shadow p-5 border\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [airport.name, \", \", airport.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto text-mono\",\n          children: airport.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this)]\n      }, airport.iata, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), !airports && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\xA0\\xA0[ Please click on 'Search' to view the list of Available Airports! ]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/pages/index.tsx"],"names":["React","useState","useEffect","Layout","getNames","getIataList","getCountries","getCities","TextField","Grid","Button","useForm","FormProvider","Autocomplete","Page","airports","airportNames","airportIataList","countries","cities","c","console","log","initialState","name","iata","country","city","filterObject","setFilterObject","resetFilters","cityOptions","setCityOptions","newOptions","map","item","push","form","defaultValues","firstName","lastName","age","gender","hobbies","onSubmit","data","onError","error","padding","handleSubmit","option","params","event","newValue","airport","toLowerCase"],"mappings":"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","sourcesContent":["import { NextPage } from \"next\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport useApiData, {\r\n  getNames,\r\n  getIataList,\r\n  getCountries,\r\n  getCities,\r\n} from \"../hooks/use-api-data\";\r\nimport Airport from \"../types/airport\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\nimport City from \"../types/city\";\r\nimport Country from \"../types/country\";\r\n// import Filters from '../components/Filters'\r\n//\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\n//\r\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Autocomplete from \"./../components/Autocomplete\";\r\n\r\n//\r\n\r\nconst Page: NextPage = () => {\r\n  let airports; //= useApiData<Airport[]>(\"/api/airports\", []);\r\n  const airportNames = getNames<AirportName[]>(\"/api/names\", []);\r\n  const airportIataList = getIataList<AirportIata[]>(\"/api/iata-list\", []);\r\n  const countries = getCountries<Country[]>(\"/api/countries\", []);\r\n  const cities = getCities<City[]>(\"/api/cities\", [], null);\r\n  //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\r\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\r\n  const c = getCountries<Country[]>(\"/api/countries\", []);\r\n  console.log(\"c\", c);\r\n  // const countries = [...new Map(c.map(item => [item[name], item])).values()]\r\n\r\n  const initialState = {\r\n    name: \"\",\r\n    iata: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n  };\r\n\r\n  const [filterObject, setFilterObject] = useState(initialState);\r\n  console.log(\"filterObject\", filterObject);\r\n\r\n  const resetFilters = () => {\r\n    setFilterObject(initialState);\r\n  };\r\n\r\n  const [cityOptions, setCityOptions] = useState(cities);\r\n\r\n  useEffect(() => {\r\n    if (!!filterObject && !!filterObject.country) {\r\n      //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\r\n      let newOptions = [];\r\n      cities.map((item) => {\r\n        console.log(\"item\", item);\r\n        console.log(\r\n          \"item.country === filterObject.country\",\r\n          item.country === filterObject.country\r\n        );\r\n        if (item.country === filterObject.country) {\r\n          console.log(\"from IF\", {\r\n            name: item.name,\r\n            country: item.country,\r\n          });\r\n          newOptions.push({\r\n            name: item.name,\r\n            country: item.country,\r\n          });\r\n          // return {\r\n          //   name: item.name,\r\n          //   country: item.country\r\n          // }\r\n        }\r\n      });\r\n      console.log(\"newOptions\", newOptions);\r\n      setCityOptions(newOptions);\r\n    }\r\n  }, [filterObject]);\r\n\r\n  // const updateCitiesList = (country) =>{\r\n  //   if(!!cityOptions && cityOptions.length > 0){\r\n  //     let newOptions = cityOptions.filter((option) => {\r\n  //       return option.country === country\r\n  //     })\r\n  //     setCityOptions(newOptions)\r\n  //   }\r\n  // }\r\n\r\n  //\r\n  const form = useForm({\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      age: \"\",\r\n      gender: \"male\",\r\n      hobbies: [\"cooking\", \"coding\"],\r\n    },\r\n  });\r\n\r\n  const onSubmit = (data) => console.log(data);\r\n  const onError = (error) => console.log(error);\r\n  //\r\n\r\n  return (\r\n    <Layout>\r\n      <h1 className=\"text-2xl\">&nbsp;&nbsp;Code Challenge: Airports</h1>\r\n      <br />\r\n      <hr />\r\n      <div style={{ padding: \"15px\" }}>\r\n        <FormProvider {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit, onError)}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  //id=\"name\"\r\n                  name=\"name\"\r\n                  options={airportNames}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Name\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: AirportName | null) => {\r\n                    setFilterObject({ ...filterObject, ...newValue });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  //name=\"iata\"\r\n                  options={airportIataList}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"IATA\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: AirportIata | null) => {\r\n                    setFilterObject({ ...filterObject, iata: newValue.name });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  name=\"country\"\r\n                  options={countries}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: Country | null) => {\r\n                    setFilterObject({\r\n                      ...filterObject,\r\n                      country: newValue.name,\r\n                    });\r\n                    //updateCitiesList(newValue.name)\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  name=\"city\"\r\n                  //options={cities}\r\n                  options={cityOptions}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: City | null) => {\r\n                    setFilterObject({ ...filterObject, city: newValue.name });\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <br />\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={9}></Grid>\r\n              <Grid item xs={1}>\r\n                <Button variant=\"contained\" color=\"default\" fullWidth>\r\n                  Reset\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    resetFilters();\r\n                  }}\r\n                  fullWidth\r\n                >\r\n                  Search\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </FormProvider>\r\n      </div>\r\n      <hr />\r\n      {/*  */}\r\n      {/*  */}\r\n      <h2 className=\"mt-10 text-xl\">\r\n        &nbsp;&nbsp;List of Airports (Sorted A-Z):\r\n      </h2>\r\n      <div>\r\n        {!!airports &&\r\n          airports.map((airport) => (\r\n            <a\r\n              href={`/airports/${airport.iata.toLowerCase()}`}\r\n              key={airport.iata}\r\n              className=\"mt-5 flex items-center shadow p-5 border\"\r\n            >\r\n              <div>\r\n                {airport.name}, {airport.city}\r\n              </div>\r\n              <div className=\"ml-auto text-mono\">{airport.country}</div>\r\n            </a>\r\n          ))}\r\n        <br />\r\n        {!airports && (\r\n          <h4>\r\n            &nbsp;&nbsp;[ Please click on 'Search' to view the list of Available\r\n            Airports! ]\r\n          </h4>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}