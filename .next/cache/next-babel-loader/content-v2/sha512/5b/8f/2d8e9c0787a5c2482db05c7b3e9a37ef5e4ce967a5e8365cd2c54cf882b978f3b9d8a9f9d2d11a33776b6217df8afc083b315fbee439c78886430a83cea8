{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\KogoKing\\\\entrepreneur\\\\github\\\\maybe-finance\\\\code-challenge-nextjs\\\\components\\\\Autocomplete.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport FormField from \"./FormField\";\nimport { FormControl, InputLabel, MenuItem, FormHelperText } from \"@material-ui/core\";\nimport { Autocomplete as MUIAutocomplete } from \"@material-ui/lab\";\nconst Autocomplete = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(FormField, _objectSpread({\n  ref: ref,\n  Component: AutocompleteImpl\n}, props), void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this));\nconst AutocompleteImpl = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    label,\n    name = \"\",\n    variant,\n    size,\n    value,\n    onChange,\n    onBlur,\n    error,\n    helperText,\n    style,\n    defaultItem,\n    items,\n    nameField = \"name\",\n    valueField = \"value\"\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"label\", \"name\", \"variant\", \"size\", \"value\", \"onChange\", \"onBlur\", \"error\", \"helperText\", \"style\", \"defaultItem\", \"items\", \"nameField\", \"valueField\"]);\n\n  const inputId = name.replace(\".\", \"-\");\n  let menuItems = [];\n\n  if (items) {\n    if (defaultItem) {\n      menuItems = [defaultItem, ...items];\n    } else {\n      menuItems = [...items];\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    variant: variant,\n    size: size,\n    error: error,\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      id: `${inputId}-label`,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MUIAutocomplete, {\n      labelId: `${inputId}-label`,\n      id: inputId,\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      label: label,\n      ref: ref,\n      children: menuItems.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: item[valueField],\n        children: item[nameField]\n      }, item[valueField], false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n      children: helperText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n});\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/components/Autocomplete.js"],"names":["React","FormField","FormControl","InputLabel","MenuItem","FormHelperText","Autocomplete","MUIAutocomplete","forwardRef","props","ref","AutocompleteImpl","label","name","variant","size","value","onChange","onBlur","error","helperText","style","defaultItem","items","nameField","valueField","restProps","inputId","replace","menuItems","map","item"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,cAJF,QAKO,mBALP;AAMA,SAASC,YAAY,IAAIC,eAAzB,QAAgD,kBAAhD;AAEA,MAAMD,YAAY,gBAAGN,KAAK,CAACQ,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,kBACpC,QAAC,SAAD;AAAW,EAAA,GAAG,EAAEA,GAAhB;AAAqB,EAAA,SAAS,EAAEC;AAAhC,GAAsDF,KAAtD;AAAA;AAAA;AAAA;AAAA,QADmB,CAArB;AAIA,MAAME,gBAAgB,gBAAGX,KAAK,CAACQ,UAAN,CACvB,OAkBEE,GAlBF,KAmBK;AAAA,MAlBH;AACEE,IAAAA,KADF;AAEEC,IAAAA,IAAI,GAAG,EAFT;AAGEC,IAAAA,OAHF;AAIEC,IAAAA,IAJF;AAKEC,IAAAA,KALF;AAMEC,IAAAA,QANF;AAOEC,IAAAA,MAPF;AAQEC,IAAAA,KARF;AASEC,IAAAA,UATF;AAUEC,IAAAA,KAVF;AAWEC,IAAAA,WAXF;AAYEC,IAAAA,KAZF;AAaEC,IAAAA,SAAS,GAAG,MAbd;AAcEC,IAAAA,UAAU,GAAG;AAdf,GAkBG;AAAA,MAHEC,SAGF;;AACH,QAAMC,OAAO,GAAGd,IAAI,CAACe,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAhB;AAEA,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAIN,KAAJ,EAAW;AACT,QAAID,WAAJ,EAAiB;AACfO,MAAAA,SAAS,GAAG,CAACP,WAAD,EAAc,GAAGC,KAAjB,CAAZ;AACD,KAFD,MAEO;AACLM,MAAAA,SAAS,GAAG,CAAC,GAAGN,KAAJ,CAAZ;AACD;AACF;;AAED,sBACE,QAAC,WAAD;AAAa,IAAA,OAAO,EAAET,OAAtB;AAA+B,IAAA,IAAI,EAAEC,IAArC;AAA2C,IAAA,KAAK,EAAEI,KAAlD;AAAyD,IAAA,KAAK,EAAEE,KAAhE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAG,GAAEM,OAAQ,QAA3B;AAAA,gBAAqCf;AAArC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,eAAD;AACE,MAAA,OAAO,EAAG,GAAEe,OAAQ,QADtB;AAEE,MAAA,EAAE,EAAEA,OAFN;AAGE,MAAA,KAAK,EAAEX,KAHT;AAIE,MAAA,QAAQ,EAAEC,QAJZ;AAKE,MAAA,MAAM,EAAEC,MALV;AAME,MAAA,KAAK,EAAEN,KANT;AAOE,MAAA,GAAG,EAAEF,GAPP;AAAA,gBASGmB,SAAS,CAACC,GAAV,CAAeC,IAAD,iBACb,QAAC,QAAD;AAAiC,QAAA,KAAK,EAAEA,IAAI,CAACN,UAAD,CAA5C;AAAA,kBACGM,IAAI,CAACP,SAAD;AADP,SAAeO,IAAI,CAACN,UAAD,CAAnB;AAAA;AAAA;AAAA;AAAA,cADD;AATH;AAAA;AAAA;AAAA;AAAA,YAFF,eAiBE,QAAC,cAAD;AAAA,gBAAiBL;AAAjB;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CArDsB,CAAzB;AAwDA,eAAed,YAAf","sourcesContent":["import React from \"react\";\r\nimport FormField from \"./FormField\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete as MUIAutocomplete } from \"@material-ui/lab\";\r\n\r\nconst Autocomplete = React.forwardRef((props, ref) => (\r\n  <FormField ref={ref} Component={AutocompleteImpl} {...props} />\r\n));\r\n\r\nconst AutocompleteImpl = React.forwardRef(\r\n  (\r\n    {\r\n      label,\r\n      name = \"\",\r\n      variant,\r\n      size,\r\n      value,\r\n      onChange,\r\n      onBlur,\r\n      error,\r\n      helperText,\r\n      style,\r\n      defaultItem,\r\n      items,\r\n      nameField = \"name\",\r\n      valueField = \"value\",\r\n      ...restProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputId = name.replace(\".\", \"-\");\r\n\r\n    let menuItems = [];\r\n    if (items) {\r\n      if (defaultItem) {\r\n        menuItems = [defaultItem, ...items];\r\n      } else {\r\n        menuItems = [...items];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <FormControl variant={variant} size={size} error={error} style={style}>\r\n        <InputLabel id={`${inputId}-label`}>{label}</InputLabel>\r\n        <MUIAutocomplete\r\n          labelId={`${inputId}-label`}\r\n          id={inputId}\r\n          value={value}\r\n          onChange={onChange}\r\n          onBlur={onBlur}\r\n          label={label}\r\n          ref={ref}\r\n        >\r\n          {menuItems.map((item) => (\r\n            <MenuItem key={item[valueField]} value={item[valueField]}>\r\n              {item[nameField]}\r\n            </MenuItem>\r\n          ))}\r\n        </MUIAutocomplete>\r\n        <FormHelperText>{helperText}</FormHelperText>\r\n      </FormControl>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}