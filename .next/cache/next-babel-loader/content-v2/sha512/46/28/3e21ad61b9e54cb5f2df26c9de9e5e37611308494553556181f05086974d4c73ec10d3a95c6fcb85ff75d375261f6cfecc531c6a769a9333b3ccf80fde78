{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\KogoKing\\\\entrepreneur\\\\github\\\\maybe-finance\\\\code-challenge-nextjs\\\\pages\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/layout\";\nimport { getNames, getIataList, getCountries, getCities } from \"../hooks/use-api-data\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { useForm } from \"react-hook-form\";\nimport { TextField } from \"@material-ui/core\";\nimport axios from \"axios\";\n\nconst Page = () => {\n  const airportNames = getNames(\"/api/names\", []);\n  const airportIataList = getIataList(\"/api/iata-list\", []);\n  const countries = getCountries(\"/api/countries\", []);\n  const cities = getCities(\"/api/cities\", [], null);\n  const c = getCountries(\"/api/countries\", []);\n  const initialState = {\n    name: \"\",\n    iata: \"\",\n    country: \"\",\n    city: \"\"\n  };\n  const {\n    0: filterObject,\n    1: setFilterObject\n  } = useState(initialState);\n  const {\n    0: currentCountryField,\n    1: setCurrentCountryField\n  } = useState(null);\n  const {\n    0: cityOptions,\n    1: setCityOptions\n  } = useState(cities);\n  useEffect(() => {\n    if (!!currentCountryField) {\n      let newOptions = [];\n      cities.forEach(city => {\n        if (city.country === currentCountryField.name) {\n          newOptions.push(city);\n        }\n      });\n      setCityOptions(newOptions);\n    } else {\n      setCityOptions(cities);\n    }\n  }, [currentCountryField]);\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  const {\n    0: airports,\n    1: setAirports\n  } = useState([]);\n\n  const getAirportsList = filters => {\n    axios({\n      method: \"post\",\n      url: \"/api/airports\",\n      data: filters\n    }).catch(err => err.response).then(response => {\n      setAirports(response.data);\n    });\n  };\n\n  const onSubmit = handleSubmit(() => {\n    getAirportsList(filterObject);\n  });\n\n  const resetFilters = () => {\n    setFilterObject(initialState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl\",\n      children: \"\\xA0\\xA0Code Challenge: Airports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"name\",\n              options: airportNames,\n              getOptionLabel: option => option.name,\n              onChange: (event, option) => {\n                if (!!option && !!option.name) {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    name: option.name\n                  }));\n                } else {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    name: \"\"\n                  }));\n                }\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                label: \"Name\",\n                variant: \"outlined\"\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"iata\",\n              options: airportIataList,\n              getOptionLabel: option => option.name,\n              onChange: (event, option) => {\n                if (!!option && !!option.name) {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    iata: option.name\n                  }));\n                } else {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    iata: \"\"\n                  }));\n                }\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                label: \"IATA\",\n                variant: \"outlined\"\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, _objectSpread(_objectSpread({\n              id: \"country\"\n            }, register(\"country\")), {}, {\n              options: countries,\n              getOptionLabel: option => option.name,\n              onChange: (event, option) => {\n                if (!!option && !!option.name) {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    country: option.name\n                  }));\n                  setCurrentCountryField(option);\n                } else {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    country: \"\"\n                  }));\n                  setCurrentCountryField(\"\");\n                }\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                label: \"Country\",\n                variant: \"outlined\"\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this)\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              id: \"city\",\n              options: cityOptions,\n              getOptionLabel: option => option.name,\n              onChange: (event, option) => {\n                if (!!option && !!option.name) {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    city: option.name\n                  }));\n                } else {\n                  setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                    city: \"\"\n                  }));\n                }\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                label: \"City\",\n                variant: \"outlined\"\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              fullWidth: true,\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-10 text-xl\",\n      children: \"\\xA0\\xA0List of Airports (Sorted A-Z):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!!airports && airports.map(airport => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/airports/${airport.iata.toLowerCase()}`,\n        className: \"mt-5 flex items-center shadow p-5 border\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [airport.name, \", \", airport.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto text-mono\",\n          children: airport.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }, this)]\n      }, airport.iata, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), !airports && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\xA0\\xA0[ Please click on 'Search' to view the list of Available Airports! ]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/pages/index.tsx"],"names":["React","useState","useEffect","Layout","getNames","getIataList","getCountries","getCities","Grid","Button","Autocomplete","useForm","TextField","axios","Page","airportNames","airportIataList","countries","cities","c","initialState","name","iata","country","city","filterObject","setFilterObject","currentCountryField","setCurrentCountryField","cityOptions","setCityOptions","newOptions","forEach","push","register","handleSubmit","airports","setAirports","getAirportsList","filters","method","url","data","catch","err","response","then","onSubmit","resetFilters","padding","option","event","params","map","airport","toLowerCase"],"mappings":"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","sourcesContent":["import { NextPage } from \"next\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport useApiData, {\r\n  getNames,\r\n  getIataList,\r\n  getCountries,\r\n  getCities,\r\n} from \"../hooks/use-api-data\";\r\nimport Airport from \"../types/airport\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\nimport City from \"../types/city\";\r\nimport Country from \"../types/country\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { useForm, NestedValue, useWatch } from \"react-hook-form\";\r\nimport { TextField, Select } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\n\r\nconst Page: NextPage = () => {\r\n  const airportNames = getNames<AirportName[]>(\"/api/names\", []);\r\n  const airportIataList = getIataList<AirportIata[]>(\"/api/iata-list\", []);\r\n  const countries = getCountries<Country[]>(\"/api/countries\", []);\r\n  const cities = getCities<City[]>(\"/api/cities\", [], null);\r\n  const c = getCountries<Country[]>(\"/api/countries\", []);\r\n\r\n  const initialState = {\r\n    name: \"\",\r\n    iata: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n  };\r\n\r\n  const [filterObject, setFilterObject] = useState(initialState);\r\n  const [currentCountryField, setCurrentCountryField] = useState(null);\r\n  const [cityOptions, setCityOptions] = useState(cities);\r\n\r\n  useEffect(() => {\r\n    if (!!currentCountryField) {\r\n      let newOptions = [];\r\n      cities.forEach((city) => {\r\n        if (city.country === currentCountryField.name) {\r\n          newOptions.push(city);\r\n        }\r\n      });\r\n      setCityOptions(newOptions);\r\n    } else {\r\n      setCityOptions(cities);\r\n    }\r\n  }, [currentCountryField]);\r\n\r\n  type FormValues = {\r\n    name: string;\r\n    iata: string;\r\n    country: string;\r\n    city: string;\r\n  };\r\n\r\n  const { register, handleSubmit } = useForm<FormValues>();\r\n\r\n  const [airports, setAirports] = useState([]);\r\n\r\n  const getAirportsList = (filters) => {\r\n    axios({\r\n      method: \"post\",\r\n      url: \"/api/airports\",\r\n      data: filters,\r\n    })\r\n      .catch((err) => err.response)\r\n      .then((response) => {\r\n        setAirports(response.data);\r\n      });\r\n  };\r\n\r\n  const onSubmit = handleSubmit(() => {\r\n    getAirportsList(filterObject);\r\n  });\r\n\r\n  const resetFilters = () => {\r\n    setFilterObject(initialState);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <h1 className=\"text-2xl\">&nbsp;&nbsp;Code Challenge: Airports</h1>\r\n      <br />\r\n      <hr />\r\n      {/* Filters */}\r\n      <div style={{ padding: \"15px\" }}>\r\n        <form onSubmit={onSubmit}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"name\"\r\n                options={airportNames}\r\n                getOptionLabel={(option: AirportName) => option.name}\r\n                onChange={(event: any, option: AirportName | null) => {\r\n                  if (!!option && !!option.name) {\r\n                    setFilterObject({ ...filterObject, name: option.name });\r\n                  } else {\r\n                    setFilterObject({ ...filterObject, name: \"\" });\r\n                  }\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Name\" variant=\"outlined\" />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"iata\"\r\n                options={airportIataList}\r\n                getOptionLabel={(option: AirportIata) => option.name}\r\n                onChange={(event: any, option: AirportIata | null) => {\r\n                  if (!!option && !!option.name) {\r\n                    setFilterObject({ ...filterObject, iata: option.name });\r\n                  } else {\r\n                    setFilterObject({ ...filterObject, iata: \"\" });\r\n                  }\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"IATA\" variant=\"outlined\" />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"country\"\r\n                {...register(\"country\")}\r\n                options={countries}\r\n                getOptionLabel={(option: Country) => option.name}\r\n                onChange={(event: any, option: Country | null) => {\r\n                  if (!!option && !!option.name) {\r\n                    setFilterObject({ ...filterObject, country: option.name });\r\n                    setCurrentCountryField(option);\r\n                  } else {\r\n                    setFilterObject({ ...filterObject, country: \"\" });\r\n                    setCurrentCountryField(\"\");\r\n                  }\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Autocomplete\r\n                id=\"city\"\r\n                options={cityOptions}\r\n                getOptionLabel={(option: City) => option.name}\r\n                onChange={(event: any, option: City | null) => {\r\n                  if (!!option && !!option.name) {\r\n                    setFilterObject({ ...filterObject, city: option.name });\r\n                  } else {\r\n                    setFilterObject({ ...filterObject, city: \"\" });\r\n                  }\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <br />\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={10}></Grid>\r\n            <Grid item xs={2}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                fullWidth\r\n              >\r\n                Search\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <hr />\r\n      {/*  List of Airports  */}\r\n      <h2 className=\"mt-10 text-xl\">\r\n        &nbsp;&nbsp;List of Airports (Sorted A-Z):\r\n      </h2>\r\n      <div>\r\n        {!!airports &&\r\n          airports.map((airport) => (\r\n            <a\r\n              href={`/airports/${airport.iata.toLowerCase()}`}\r\n              key={airport.iata}\r\n              className=\"mt-5 flex items-center shadow p-5 border\"\r\n            >\r\n              <div>\r\n                {airport.name}, {airport.city}\r\n              </div>\r\n              <div className=\"ml-auto text-mono\">{airport.country}</div>\r\n            </a>\r\n          ))}\r\n        <br />\r\n        {!airports && (\r\n          <h4>\r\n            &nbsp;&nbsp;[ Please click on 'Search' to view the list of Available\r\n            Airports! ]\r\n          </h4>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}