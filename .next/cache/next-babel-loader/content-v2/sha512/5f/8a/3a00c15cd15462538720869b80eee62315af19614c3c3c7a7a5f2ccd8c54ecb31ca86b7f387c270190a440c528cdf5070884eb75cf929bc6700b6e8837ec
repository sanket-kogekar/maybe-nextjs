{"ast":null,"code":"import airports from \"../data/airports.json\";\nexport const findAirportByIata = async (iata) => {\n  return airports.find(airport => airport.iata === iata.toUpperCase());\n}; //\n// filteredAirports = response.data.filter((airport) => {\n//   airport.name === filters.name &&\n//     airport.iata === filters.iata &&\n//     airport.city === filters.city &&\n//     airport.country === filters.country;\n// });\n//\n\nconst getValue = value => typeof value === \"string\" ? value.toUpperCase() : value;\n\nexport const allAirports = async filters => {\n  // const filterByName = !!filters.name;\n  // const filterByIata = !!filters.iata;\n  // const filterByCity = !!filters.city;\n  // const filterByCountry = !!filters.country;\n  // let filteredAirports = []\n  // filteredAirports =  airports.filter((airport) => {\n  //   filterByName ? filters.name === airport.name\n  //   && filterByIata ? filters.iata === airport.iata\n  //   && filterByCity ? filters.city === airport.city\n  //   && filterByCountry ? filters.country === airport.country\n  // });\n  //\n  //\n  // console.log(\"filters\", filters);\n  // const filterKeys = Object.keys(filters);\n  // let m = [];\n  // m = airports.filter((item) => {\n  //   // validates all filter criteriasla\n  //   return filterKeys.every((key) => {\n  //     // ignores an empty filter\n  //     console.log(\"filters[key]\", filters[key]);\n  //     //console.log(\"filters[key].length\", filters[key].length);\n  //     if (filters[key].length) return true;\n  //     return filters[key].find(\n  //       (filter) => getValue(filter) === getValue(item[key])\n  //     );\n  //   });\n  // });\n  const {\n    name,\n    iata,\n    city,\n    country\n  } = filters;\n  let filteredAirports = [];\n\n  if (name || iata || city || country) {\n    filteredAirports = airports.filter(airport => {\n      if (name && name != airport.name) {\n        return false;\n      }\n\n      if (iata && iata != airport.iata) {\n        return false;\n      }\n\n      if (country && country != airport.country) {\n        return false;\n      }\n\n      if (city && city != airport.city) {\n        return false;\n      }\n\n      return true;\n    });\n    return filteredAirports.sort(function (a, b) {\n      var firstItem = a.name.toUpperCase();\n      var secondItem = b.name.toUpperCase();\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\n    });\n  } else {\n    return airports.sort(function (a, b) {\n      var firstItem = a.name.toUpperCase();\n      var secondItem = b.name.toUpperCase();\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\n    });\n  }\n};\nexport const getAirportNames = async () => {\n  let names = [];\n  airports.map(airport => {\n    names.push({\n      name: airport.name\n    });\n  });\n  return names;\n};\nexport const getAirportIataList = async () => {\n  let airportIataList = [];\n  airports.map(airport => {\n    airportIataList.push({\n      name: airport.iata\n    });\n  });\n  return airportIataList;\n};\nexport const getCountries = async () => {\n  let countries = [];\n  airports.map(airport => {\n    countries.push({\n      name: airport.country\n    });\n  });\n  return countries;\n};\nexport const getCities = async () => {\n  let cities = [];\n  airports.map(airport => {\n    cities.push({\n      name: airport.city,\n      country: airport.country\n    });\n  });\n  return cities;\n};","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/models/airport.ts"],"names":["airports","findAirportByIata","iata","find","airport","toUpperCase","getValue","value","allAirports","filters","name","city","country","filteredAirports","filter","sort","a","b","firstItem","secondItem","getAirportNames","names","map","push","getAirportIataList","airportIataList","getCountries","countries","getCities","cities"],"mappings":"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","sourcesContent":["import airports from \"../data/airports.json\";\r\nimport Airport from \"../types/airport\";\r\nimport Country from \"../types/country\";\r\nimport City from \"../types/city\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\n\r\nexport const findAirportByIata = async (\r\n  iata: string\r\n): Promise<Airport | undefined> => {\r\n  return airports.find((airport) => airport.iata === iata.toUpperCase());\r\n};\r\n\r\n//\r\n// filteredAirports = response.data.filter((airport) => {\r\n//   airport.name === filters.name &&\r\n//     airport.iata === filters.iata &&\r\n//     airport.city === filters.city &&\r\n//     airport.country === filters.country;\r\n// });\r\n//\r\nconst getValue = (value) =>\r\n  typeof value === \"string\" ? value.toUpperCase() : value;\r\n\r\nexport const allAirports = async (filters): Promise<Airport[]> => {\r\n  // const filterByName = !!filters.name;\r\n  // const filterByIata = !!filters.iata;\r\n  // const filterByCity = !!filters.city;\r\n  // const filterByCountry = !!filters.country;\r\n  // let filteredAirports = []\r\n\r\n  // filteredAirports =  airports.filter((airport) => {\r\n  //   filterByName ? filters.name === airport.name\r\n  //   && filterByIata ? filters.iata === airport.iata\r\n  //   && filterByCity ? filters.city === airport.city\r\n  //   && filterByCountry ? filters.country === airport.country\r\n  // });\r\n  //\r\n  //\r\n  // console.log(\"filters\", filters);\r\n  // const filterKeys = Object.keys(filters);\r\n  // let m = [];\r\n  // m = airports.filter((item) => {\r\n  //   // validates all filter criteriasla\r\n  //   return filterKeys.every((key) => {\r\n  //     // ignores an empty filter\r\n  //     console.log(\"filters[key]\", filters[key]);\r\n  //     //console.log(\"filters[key].length\", filters[key].length);\r\n  //     if (filters[key].length) return true;\r\n  //     return filters[key].find(\r\n  //       (filter) => getValue(filter) === getValue(item[key])\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  const { name, iata, city, country } = filters;\r\n\r\n  let filteredAirports = [];\r\n  if (name || iata || city || country) {\r\n    filteredAirports = airports.filter((airport) => {\r\n      if (name && name != airport.name) {\r\n        return false;\r\n      }\r\n      if (iata && iata != airport.iata) {\r\n        return false;\r\n      }\r\n      if (country && country != airport.country) {\r\n        return false;\r\n      }\r\n      if (city && city != airport.city) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    return filteredAirports.sort(function (a, b) {\r\n      var firstItem = a.name.toUpperCase();\r\n      var secondItem = b.name.toUpperCase();\r\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\r\n    });\r\n  } else {\r\n    return airports.sort(function (a, b) {\r\n      var firstItem = a.name.toUpperCase();\r\n      var secondItem = b.name.toUpperCase();\r\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\r\n    });\r\n  }\r\n};\r\n\r\nexport const getAirportNames = async (): Promise<AirportName[]> => {\r\n  let names = [];\r\n  airports.map((airport) => {\r\n    names.push({ name: airport.name });\r\n  });\r\n  return names;\r\n};\r\n\r\nexport const getAirportIataList = async (): Promise<AirportName[]> => {\r\n  let airportIataList = [];\r\n  airports.map((airport) => {\r\n    airportIataList.push({ name: airport.iata });\r\n  });\r\n  return airportIataList;\r\n};\r\n\r\nexport const getCountries = async (): Promise<AirportName[]> => {\r\n  let countries = [];\r\n  airports.map((airport) => {\r\n    countries.push({ name: airport.country });\r\n  });\r\n  return countries;\r\n};\r\n\r\nexport const getCities = async (): Promise<AirportName[]> => {\r\n  let cities = [];\r\n  airports.map((airport) => {\r\n    cities.push({ name: airport.city, country: airport.country });\r\n  });\r\n  return cities;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}