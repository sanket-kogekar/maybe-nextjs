{"ast":null,"code":"import airports from \"../data/airports.json\";\nexport const findAirportByIata = async (iata) => {\n  return airports.find(airport => airport.iata === iata.toUpperCase());\n};\n\nconst removeDuplicates = (originalArray, objKey) => {\n  var trimmedArray = [];\n  var values = [];\n  var value;\n\n  for (var i = 0; i < originalArray.length; i++) {\n    value = originalArray[i][objKey];\n\n    if (values.indexOf(value) === -1) {\n      trimmedArray.push(originalArray[i]);\n      values.push(value);\n    }\n  }\n\n  return trimmedArray;\n}; //\n// filteredAirports = response.data.filter((airport) => {\n//   airport.name === filters.name &&\n//     airport.iata === filters.iata &&\n//     airport.city === filters.city &&\n//     airport.country === filters.country;\n// });\n//\n\n\nconst getValue = value => typeof value === \"string\" ? value.toUpperCase() : value;\n\nexport const allAirports = async filters => {\n  // const filterByName = !!filters.name;\n  // const filterByIata = !!filters.iata;\n  // const filterByCity = !!filters.city;\n  // const filterByCountry = !!filters.country;\n  // let filteredAirports = []\n  // filteredAirports =  airports.filter((airport) => {\n  //   filterByName ? filters.name === airport.name\n  //   && filterByIata ? filters.iata === airport.iata\n  //   && filterByCity ? filters.city === airport.city\n  //   && filterByCountry ? filters.country === airport.country\n  // });\n  //\n  //\n  // console.log(\"filters\", filters);\n  // const filterKeys = Object.keys(filters);\n  // let m = [];\n  // m = airports.filter((item) => {\n  //   // validates all filter criteriasla\n  //   return filterKeys.every((key) => {\n  //     // ignores an empty filter\n  //     console.log(\"filters[key]\", filters[key]);\n  //     //console.log(\"filters[key].length\", filters[key].length);\n  //     if (filters[key].length) return true;\n  //     return filters[key].find(\n  //       (filter) => getValue(filter) === getValue(item[key])\n  //     );\n  //   });\n  // });\n  const {\n    name,\n    iata,\n    city,\n    country\n  } = filters;\n  let filteredAirports = [];\n\n  if (name || iata || city || country) {\n    filteredAirports = airports.filter(airport => {\n      if (name && name != airport.name) {\n        return false;\n      }\n\n      if (iata && iata != airport.iata) {\n        return false;\n      }\n\n      if (country && country != airport.country) {\n        return false;\n      }\n\n      if (city && city != airport.city) {\n        return false;\n      }\n\n      return true;\n    });\n    return filteredAirports.sort(function (a, b) {\n      var firstItem = a.name.toUpperCase();\n      var secondItem = b.name.toUpperCase();\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\n    });\n  } else {\n    return airports.sort(function (a, b) {\n      var firstItem = a.name.toUpperCase();\n      var secondItem = b.name.toUpperCase();\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\n    });\n  }\n};\nexport const getAirportNames = async () => {\n  let names = [];\n  airports.map(airport => {\n    names.push({\n      name: airport.name\n    });\n  });\n  return names.sort(function (a, b) {\n    var firstItem = a.name.toUpperCase();\n    var secondItem = b.name.toUpperCase();\n    return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\n  });\n};\nexport const getAirportIataList = async () => {\n  let airportIataList = [];\n  airports.map(airport => {\n    airportIataList.push({\n      name: airport.iata\n    });\n  });\n  return airportIataList;\n};\nexport const getCountries = async () => {\n  let countries = [];\n  airports.map(airport => {\n    countries.push({\n      name: airport.country\n    });\n  });\n  countries = removeDuplicates(countries, \"name\");\n  return countries.sort(function (a, b) {\n    var firstItem = a.name.toUpperCase();\n    var secondItem = b.name.toUpperCase();\n    return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\n  });\n};\nexport const getCities = async () => {\n  let cities = [];\n  airports.map(airport => {\n    cities.push({\n      name: airport.city,\n      country: airport.country\n    });\n  });\n  return cities;\n};","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/models/airport.ts"],"names":["airports","findAirportByIata","iata","find","airport","toUpperCase","removeDuplicates","originalArray","objKey","trimmedArray","values","value","i","length","indexOf","push","getValue","allAirports","filters","name","city","country","filteredAirports","filter","sort","a","b","firstItem","secondItem","getAirportNames","names","map","getAirportIataList","airportIataList","getCountries","countries","getCities","cities"],"mappings":"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","sourcesContent":["import airports from \"../data/airports.json\";\r\nimport Airport from \"../types/airport\";\r\nimport Country from \"../types/country\";\r\nimport City from \"../types/city\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\n\r\nexport const findAirportByIata = async (\r\n  iata: string\r\n): Promise<Airport | undefined> => {\r\n  return airports.find((airport) => airport.iata === iata.toUpperCase());\r\n};\r\n\r\nconst removeDuplicates = (originalArray: any, objKey: string) => {\r\n  var trimmedArray = [];\r\n  var values = [];\r\n  var value;\r\n  for (var i = 0; i < originalArray.length; i++) {\r\n    value = originalArray[i][objKey];\r\n    if (values.indexOf(value) === -1) {\r\n      trimmedArray.push(originalArray[i]);\r\n      values.push(value);\r\n    }\r\n  }\r\n  return trimmedArray;\r\n};\r\n//\r\n// filteredAirports = response.data.filter((airport) => {\r\n//   airport.name === filters.name &&\r\n//     airport.iata === filters.iata &&\r\n//     airport.city === filters.city &&\r\n//     airport.country === filters.country;\r\n// });\r\n//\r\nconst getValue = (value) =>\r\n  typeof value === \"string\" ? value.toUpperCase() : value;\r\n\r\nexport const allAirports = async (filters): Promise<Airport[]> => {\r\n  // const filterByName = !!filters.name;\r\n  // const filterByIata = !!filters.iata;\r\n  // const filterByCity = !!filters.city;\r\n  // const filterByCountry = !!filters.country;\r\n  // let filteredAirports = []\r\n\r\n  // filteredAirports =  airports.filter((airport) => {\r\n  //   filterByName ? filters.name === airport.name\r\n  //   && filterByIata ? filters.iata === airport.iata\r\n  //   && filterByCity ? filters.city === airport.city\r\n  //   && filterByCountry ? filters.country === airport.country\r\n  // });\r\n  //\r\n  //\r\n  // console.log(\"filters\", filters);\r\n  // const filterKeys = Object.keys(filters);\r\n  // let m = [];\r\n  // m = airports.filter((item) => {\r\n  //   // validates all filter criteriasla\r\n  //   return filterKeys.every((key) => {\r\n  //     // ignores an empty filter\r\n  //     console.log(\"filters[key]\", filters[key]);\r\n  //     //console.log(\"filters[key].length\", filters[key].length);\r\n  //     if (filters[key].length) return true;\r\n  //     return filters[key].find(\r\n  //       (filter) => getValue(filter) === getValue(item[key])\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  const { name, iata, city, country } = filters;\r\n\r\n  let filteredAirports = [];\r\n  if (name || iata || city || country) {\r\n    filteredAirports = airports.filter((airport) => {\r\n      if (name && name != airport.name) {\r\n        return false;\r\n      }\r\n      if (iata && iata != airport.iata) {\r\n        return false;\r\n      }\r\n      if (country && country != airport.country) {\r\n        return false;\r\n      }\r\n      if (city && city != airport.city) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    return filteredAirports.sort(function (a, b) {\r\n      var firstItem = a.name.toUpperCase();\r\n      var secondItem = b.name.toUpperCase();\r\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\r\n    });\r\n  } else {\r\n    return airports.sort(function (a, b) {\r\n      var firstItem = a.name.toUpperCase();\r\n      var secondItem = b.name.toUpperCase();\r\n      return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\r\n    });\r\n  }\r\n};\r\n\r\nexport const getAirportNames = async (): Promise<AirportName[]> => {\r\n  let names = [];\r\n  airports.map((airport) => {\r\n    names.push({ name: airport.name });\r\n  });\r\n  return names.sort(function (a, b) {\r\n    var firstItem = a.name.toUpperCase();\r\n    var secondItem = b.name.toUpperCase();\r\n    return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\r\n  });\r\n};\r\n\r\nexport const getAirportIataList = async (): Promise<AirportName[]> => {\r\n  let airportIataList = [];\r\n  airports.map((airport) => {\r\n    airportIataList.push({ name: airport.iata });\r\n  });\r\n  return airportIataList;\r\n};\r\n\r\nexport const getCountries = async (): Promise<AirportName[]> => {\r\n  let countries = [];\r\n  airports.map((airport) => {\r\n    countries.push({ name: airport.country });\r\n  });\r\n  countries = removeDuplicates(countries, \"name\");\r\n  return countries.sort(function (a, b) {\r\n    var firstItem = a.name.toUpperCase();\r\n    var secondItem = b.name.toUpperCase();\r\n    return firstItem < secondItem ? -1 : firstItem > secondItem ? 1 : 0;\r\n  });\r\n};\r\n\r\nexport const getCities = async (): Promise<AirportName[]> => {\r\n  let cities = [];\r\n  airports.map((airport) => {\r\n    cities.push({ name: airport.city, country: airport.country });\r\n  });\r\n  return cities;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}