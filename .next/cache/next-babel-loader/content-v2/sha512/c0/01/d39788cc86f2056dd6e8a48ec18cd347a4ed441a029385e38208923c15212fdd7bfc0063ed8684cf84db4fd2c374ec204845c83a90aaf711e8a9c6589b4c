{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\KogoKing\\\\entrepreneur\\\\github\\\\maybe-finance\\\\code-challenge-nextjs\\\\pages\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../components/layout';\nimport useApiData, { getNames, getIataList, getCountries, getCities } from '../hooks/use-api-data';\n// import Filters from '../components/Filters'\n//\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\"; //\n\nconst Page = () => {\n  let airports = useApiData('/api/airports', []);\n  const airportNames = getNames('/api/names', []);\n  const airportIataList = getIataList('/api/iata-list', []);\n  const countries = getCountries('/api/countries', []);\n  const cities = getCities('/api/cities', [], null); //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\n\n  const initialState = {\n    name: \"\",\n    iata: \"\",\n    country: \"\",\n    city: \"\"\n  };\n  const {\n    0: filterObject,\n    1: setFilterObject\n  } = useState(initialState);\n  console.log(\"filterObject\", filterObject);\n\n  const resetFilters = () => {\n    setFilterObject(initialState);\n  };\n\n  const {\n    0: cityOptions,\n    1: setCityOptions\n  } = useState(cities);\n  useEffect(() => {\n    if (!!filterObject && !!filterObject.country) {//let cities = getCities<City[]>('/api/cities', [], filterObject.country)\n      // setCityOptions()\n    }\n  }, [filterObject]); // const updateCitiesList = (country) =>{\n  //   if(!!cityOptions && cityOptions.length > 0){\n  //     let newOptions = cityOptions.filter((option) => {\n  //       return option.country === country\n  //     })\n  //     setCityOptions(newOptions)\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl\",\n      children: \"Code Challenge: Airports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"name\",\n            options: airportNames,\n            getOptionLabel: option => option.name,\n            style: {\n              width: 300\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              label: \"Name\",\n              variant: \"outlined\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this),\n            onChange: (event, newValue) => {\n              setFilterObject(_objectSpread(_objectSpread({}, filterObject), newValue));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"iata\",\n            options: airportIataList,\n            getOptionLabel: option => option.name,\n            style: {\n              width: 300\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              label: \"IATA\",\n              variant: \"outlined\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this),\n            onChange: (event, newValue) => {\n              setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                \"iata\": newValue.name\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"country\",\n            options: countries,\n            getOptionLabel: option => option.name,\n            style: {\n              width: 300\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              label: \"Country\",\n              variant: \"outlined\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this),\n            onChange: (event, newValue) => {\n              setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                \"country\": newValue.name\n              })); //updateCitiesList(newValue.name)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"city\",\n            options: cities //options={cityOptions}\n            ,\n            getOptionLabel: option => option.name,\n            style: {\n              width: 300\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              label: \"City\",\n              variant: \"outlined\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this),\n            onChange: (event, newValue) => {\n              setFilterObject(_objectSpread(_objectSpread({}, filterObject), {}, {\n                \"city\": newValue.name\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 9\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"default\",\n            fullWidth: true,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              resetFilters();\n            },\n            fullWidth: true,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-10 text-xl\",\n      children: \"List of Airports (Sorted A-Z):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: airports.map(airport => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/airports/${airport.iata.toLowerCase()}`,\n        className: \"mt-5 flex items-center shadow p-5 border\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [airport.name, \", \", airport.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto text-mono\",\n          children: airport.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, airport.iata, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/pages/index.tsx"],"names":["React","useState","useEffect","Layout","useApiData","getNames","getIataList","getCountries","getCities","TextField","Autocomplete","Grid","Button","Page","airports","airportNames","airportIataList","countries","cities","initialState","name","iata","country","city","filterObject","setFilterObject","console","log","resetFilters","cityOptions","setCityOptions","padding","option","width","params","event","newValue","map","airport","toLowerCase"],"mappings":"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","sourcesContent":["import { NextPage } from 'next'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Layout from '../components/layout'\r\nimport useApiData, {getNames, getIataList, getCountries, getCities} from '../hooks/use-api-data'\r\nimport Airport from '../types/airport'\r\nimport AirportName from '../types/airport-name'\r\nimport AirportIata from '../types/airport-iata'\r\nimport City from '../types/city'\r\nimport Country from '../types/country'\r\n// import Filters from '../components/Filters'\r\n//\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//\r\n\r\nconst Page: NextPage = () => {\r\n  let airports = useApiData<Airport[]>('/api/airports', [])\r\n  const airportNames = getNames<AirportName[]>('/api/names', [])\r\n  const airportIataList = getIataList<AirportIata[]>('/api/iata-list', [])\r\n  const countries = getCountries<Country[]>('/api/countries', [])\r\n  const cities = getCities<City[]>('/api/cities', [], null)\r\n  //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\r\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\r\n\r\n  const initialState = {\r\n    name: \"\",\r\n    iata: \"\",\r\n    country: \"\",\r\n    city: \"\"\r\n  }\r\n\r\n  const [filterObject, setFilterObject] = useState(initialState)\r\n  console.log(\"filterObject\",filterObject)\r\n\r\n  const resetFilters = () =>{\r\n    setFilterObject(initialState)\r\n  }\r\n\r\n  const [cityOptions, setCityOptions] = useState(cities)\r\n\r\n\r\nuseEffect(()=>{\r\nif(!!filterObject && !!filterObject.country){\r\n  //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\r\n  // setCityOptions()\r\n}\r\n},[filterObject])\r\n\r\n  // const updateCitiesList = (country) =>{\r\n  //   if(!!cityOptions && cityOptions.length > 0){\r\n  //     let newOptions = cityOptions.filter((option) => {\r\n  //       return option.country === country\r\n  //     })\r\n  //     setCityOptions(newOptions)\r\n  //   }\r\n  // }\r\n\r\n  return <Layout>\r\n    <h1 className='text-2xl'>Code Challenge: Airports</h1>\r\n    {/*   */}\r\n    {/* <Filters /> */}\r\n    <hr />\r\n      <div style={{ padding: \"15px\" }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={3}>\r\n            <Autocomplete\r\n              id=\"name\"\r\n              options={airportNames}\r\n              getOptionLabel={(option) => option.name}\r\n              style={{ width: 300 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Name\" variant=\"outlined\" />\r\n              )}\r\n              onChange={(event: any, newValue: AirportName | null) => {\r\n                setFilterObject({...filterObject, ...newValue})\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Autocomplete\r\n              id=\"iata\"\r\n              options={airportIataList}\r\n              getOptionLabel={(option) => option.name}\r\n              style={{ width: 300 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"IATA\" variant=\"outlined\" />\r\n              )}\r\n              onChange={(event: any, newValue: AirportIata | null) => {\r\n                setFilterObject({...filterObject, \"iata\" : newValue.name})\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Autocomplete\r\n              id=\"country\"\r\n              options={countries}\r\n              getOptionLabel={(option) => option.name}\r\n              style={{ width: 300 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n              )}\r\n              onChange={(event: any, newValue: Country | null) => {\r\n                setFilterObject({...filterObject, \"country\" : newValue.name})\r\n                //updateCitiesList(newValue.name)\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Autocomplete\r\n              id=\"city\"\r\n              options={cities}\r\n              //options={cityOptions}\r\n              getOptionLabel={(option) => option.name}\r\n              style={{ width: 300 }}\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n              )}\r\n              onChange={(event: any, newValue: City | null) => {\r\n                setFilterObject({...filterObject, \"city\" : newValue.name})\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={9}></Grid>\r\n          <Grid item xs={1}>\r\n            <Button variant=\"contained\" color=\"default\" fullWidth>\r\n              Reset\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => {\r\n              resetFilters()\r\n            }} fullWidth>\r\n              Search\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <hr />\r\n    {/*  */}\r\n    {/*  */}\r\n    <h2 className=\"mt-10 text-xl\">List of Airports (Sorted A-Z):</h2>\r\n    <div>\r\n      {airports.map(airport => (\r\n        <a href={`/airports/${airport.iata.toLowerCase()}`} key={airport.iata} className='mt-5 flex items-center shadow p-5 border'>\r\n          <div>\r\n            {airport.name}, {airport.city}\r\n          </div>\r\n          <div className='ml-auto text-mono'>\r\n            {airport.country}\r\n          </div>\r\n        </a>\r\n      ))}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nexport default Page"]},"metadata":{},"sourceType":"module"}