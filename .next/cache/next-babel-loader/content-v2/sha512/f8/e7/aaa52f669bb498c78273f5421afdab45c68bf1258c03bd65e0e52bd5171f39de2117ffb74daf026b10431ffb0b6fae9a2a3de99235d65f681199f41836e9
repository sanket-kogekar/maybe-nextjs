{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\KogoKing\\\\entrepreneur\\\\github\\\\maybe-finance\\\\code-challenge-nextjs\\\\pages\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/layout\";\nimport { getNames, getIataList, getCountries, getCities } from \"../hooks/use-api-data\";\n// import Filters from '../components/Filters'\n//\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useForm, Controller } from \"react-hook-form\"; //\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"; //import Autocomplete from \"./../components/Autocomplete\";\n//\n\nconst Page = () => {\n  let airports; //= useApiData<Airport[]>(\"/api/airports\", []);\n\n  const airportNames = getNames(\"/api/names\", []);\n  const airportIataList = getIataList(\"/api/iata-list\", []);\n  const countries = getCountries(\"/api/countries\", []);\n  const cities = getCities(\"/api/cities\", [], null); //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\n\n  const c = getCountries(\"/api/countries\", []);\n  console.log(\"c\", c); // const countries = [...new Map(c.map(item => [item[name], item])).values()]\n\n  const initialState = {\n    name: \"\",\n    iata: \"\",\n    country: \"\",\n    city: \"\"\n  };\n  const {\n    0: filterObject,\n    1: setFilterObject\n  } = useState(initialState);\n  console.log(\"filterObject\", filterObject);\n\n  const resetFilters = () => {\n    setFilterObject(initialState);\n  };\n\n  const {\n    0: cityOptions,\n    1: setCityOptions\n  } = useState(cities);\n  useEffect(() => {\n    if (!!filterObject && !!filterObject.country) {\n      //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\n      let newOptions = [];\n      cities.map(item => {\n        console.log(\"item\", item);\n        console.log(\"item.country === filterObject.country\", item.country === filterObject.country);\n\n        if (item.country === filterObject.country) {\n          console.log(\"from IF\", {\n            name: item.name,\n            country: item.country\n          });\n          newOptions.push({\n            name: item.name,\n            country: item.country\n          }); // return {\n          //   name: item.name,\n          //   country: item.country\n          // }\n        }\n      });\n      console.log(\"newOptions\", newOptions);\n      setCityOptions(newOptions);\n    }\n  }, [filterObject]); // const updateCitiesList = (country) =>{\n  //   if(!!cityOptions && cityOptions.length > 0){\n  //     let newOptions = cityOptions.filter((option) => {\n  //       return option.country === country\n  //     })\n  //     setCityOptions(newOptions)\n  //   }\n  // }\n  //\n\n  const form = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      age: \"\",\n      gender: \"male\",\n      hobbies: [\"cooking\", \"coding\"]\n    }\n  });\n\n  const onSubmit = data => console.log(data);\n\n  const onError = error => console.log(error); //\n\n\n  const getOpObj = option => {\n    if (!option._id) option = options.find(op => op._id === option);\n    return option;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl\",\n      children: \"\\xA0\\xA0Code Challenge: Airports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(data => console.log(data)),\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"country\",\n          as: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            options: options,\n            getOptionLabel: option => getOpObj(option).name,\n            getOptionSelected: (option, value) => {\n              return option._id === getOpObj(value)._id;\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              label: \"Country\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this),\n          onChange: ([, obj]) => getOpObj(obj)._id,\n          control: control,\n          defaultValue: options[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-10 text-xl\",\n      children: \"\\xA0\\xA0List of Airports (Sorted A-Z):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!!airports && airports.map(airport => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/airports/${airport.iata.toLowerCase()}`,\n        className: \"mt-5 flex items-center shadow p-5 border\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [airport.name, \", \", airport.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto text-mono\",\n          children: airport.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this)]\n      }, airport.iata, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), !airports && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\xA0\\xA0[ Please click on 'Search' to view the list of Available Airports! ]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/pages/index.tsx"],"names":["React","useState","useEffect","Layout","getNames","getIataList","getCountries","getCities","TextField","Button","useForm","Controller","Autocomplete","Page","airports","airportNames","airportIataList","countries","cities","c","console","log","initialState","name","iata","country","city","filterObject","setFilterObject","resetFilters","cityOptions","setCityOptions","newOptions","map","item","push","form","defaultValues","firstName","lastName","age","gender","hobbies","onSubmit","data","onError","error","getOpObj","option","_id","options","find","op","padding","handleSubmit","value","params","obj","control","airport","toLowerCase"],"mappings":"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","sourcesContent":["import { NextPage } from \"next\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport useApiData, {\r\n  getNames,\r\n  getIataList,\r\n  getCountries,\r\n  getCities,\r\n} from \"../hooks/use-api-data\";\r\nimport Airport from \"../types/airport\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\nimport City from \"../types/city\";\r\nimport Country from \"../types/country\";\r\n// import Filters from '../components/Filters'\r\n//\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { useForm, FormProvider, Controller } from \"react-hook-form\";\r\n//\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n//import Autocomplete from \"./../components/Autocomplete\";\r\n\r\n//\r\n\r\nconst Page: NextPage = () => {\r\n  let airports; //= useApiData<Airport[]>(\"/api/airports\", []);\r\n  const airportNames = getNames<AirportName[]>(\"/api/names\", []);\r\n  const airportIataList = getIataList<AirportIata[]>(\"/api/iata-list\", []);\r\n  const countries = getCountries<Country[]>(\"/api/countries\", []);\r\n  const cities = getCities<City[]>(\"/api/cities\", [], null);\r\n  //const [cityOptions, setCityOptions] = useState(getCities<City[]>('/api/cities', []))\r\n  //const [cities, setCities] = useState(getCities<City[]>('/api/cities', [], null))\r\n  const c = getCountries<Country[]>(\"/api/countries\", []);\r\n  console.log(\"c\", c);\r\n  // const countries = [...new Map(c.map(item => [item[name], item])).values()]\r\n\r\n  const initialState = {\r\n    name: \"\",\r\n    iata: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n  };\r\n\r\n  const [filterObject, setFilterObject] = useState(initialState);\r\n  console.log(\"filterObject\", filterObject);\r\n\r\n  const resetFilters = () => {\r\n    setFilterObject(initialState);\r\n  };\r\n\r\n  const [cityOptions, setCityOptions] = useState(cities);\r\n\r\n  useEffect(() => {\r\n    if (!!filterObject && !!filterObject.country) {\r\n      //let cities = getCities<City[]>('/api/cities', [], filterObject.country)\r\n      let newOptions = [];\r\n      cities.map((item) => {\r\n        console.log(\"item\", item);\r\n        console.log(\r\n          \"item.country === filterObject.country\",\r\n          item.country === filterObject.country\r\n        );\r\n        if (item.country === filterObject.country) {\r\n          console.log(\"from IF\", {\r\n            name: item.name,\r\n            country: item.country,\r\n          });\r\n          newOptions.push({\r\n            name: item.name,\r\n            country: item.country,\r\n          });\r\n          // return {\r\n          //   name: item.name,\r\n          //   country: item.country\r\n          // }\r\n        }\r\n      });\r\n      console.log(\"newOptions\", newOptions);\r\n      setCityOptions(newOptions);\r\n    }\r\n  }, [filterObject]);\r\n\r\n  // const updateCitiesList = (country) =>{\r\n  //   if(!!cityOptions && cityOptions.length > 0){\r\n  //     let newOptions = cityOptions.filter((option) => {\r\n  //       return option.country === country\r\n  //     })\r\n  //     setCityOptions(newOptions)\r\n  //   }\r\n  // }\r\n\r\n  //\r\n  const form = useForm({\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      age: \"\",\r\n      gender: \"male\",\r\n      hobbies: [\"cooking\", \"coding\"],\r\n    },\r\n  });\r\n\r\n  const onSubmit = (data) => console.log(data);\r\n  const onError = (error) => console.log(error);\r\n  //\r\n\r\n  const getOpObj = (option) => {\r\n    if (!option._id) option = options.find((op) => op._id === option);\r\n    return option;\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <h1 className=\"text-2xl\">&nbsp;&nbsp;Code Challenge: Airports</h1>\r\n      <br />\r\n      <hr />\r\n      <div style={{ padding: \"15px\" }}>\r\n        <form onSubmit={handleSubmit((data) => console.log(data))}>\r\n          <Controller\r\n            name=\"country\"\r\n            as={\r\n              <Autocomplete\r\n                options={options}\r\n                getOptionLabel={(option) => getOpObj(option).name}\r\n                getOptionSelected={(option, value) => {\r\n                  return option._id === getOpObj(value)._id;\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Country\" />\r\n                )}\r\n              />\r\n            }\r\n            onChange={([, obj]) => getOpObj(obj)._id}\r\n            control={control}\r\n            defaultValue={options[0]}\r\n          />\r\n          <Button type=\"submit\">Submit</Button>\r\n        </form>\r\n        {/* <FormProvider {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit, onError)}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  //id=\"name\"\r\n                  name=\"name\"\r\n                  options={airportNames}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Name\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: AirportName | null) => {\r\n                    setFilterObject({ ...filterObject, ...newValue });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  name=\"iata\"\r\n                  options={airportIataList}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"IATA\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: AirportIata | null) => {\r\n                    setFilterObject({ ...filterObject, iata: newValue.name });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  name=\"country\"\r\n                  options={countries}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Country\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: Country | null) => {\r\n                    setFilterObject({\r\n                      ...filterObject,\r\n                      country: newValue.name,\r\n                    });\r\n                    //updateCitiesList(newValue.name)\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Autocomplete\r\n                  name=\"city\"\r\n                  //options={cities}\r\n                  options={cityOptions}\r\n                  getOptionLabel={(option) => option.name}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"City\" variant=\"outlined\" />\r\n                  )}\r\n                  onChange={(event: any, newValue: City | null) => {\r\n                    setFilterObject({ ...filterObject, city: newValue.name });\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <br />\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={9}></Grid>\r\n              <Grid item xs={1}>\r\n                <Button variant=\"contained\" color=\"default\" fullWidth>\r\n                  Reset\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    resetFilters();\r\n                  }}\r\n                  fullWidth\r\n                >\r\n                  Search\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </FormProvider> */}\r\n      </div>\r\n      <hr />\r\n      {/*  */}\r\n      {/*  */}\r\n      <h2 className=\"mt-10 text-xl\">\r\n        &nbsp;&nbsp;List of Airports (Sorted A-Z):\r\n      </h2>\r\n      <div>\r\n        {!!airports &&\r\n          airports.map((airport) => (\r\n            <a\r\n              href={`/airports/${airport.iata.toLowerCase()}`}\r\n              key={airport.iata}\r\n              className=\"mt-5 flex items-center shadow p-5 border\"\r\n            >\r\n              <div>\r\n                {airport.name}, {airport.city}\r\n              </div>\r\n              <div className=\"ml-auto text-mono\">{airport.country}</div>\r\n            </a>\r\n          ))}\r\n        <br />\r\n        {!airports && (\r\n          <h4>\r\n            &nbsp;&nbsp;[ Please click on 'Search' to view the list of Available\r\n            Airports! ]\r\n          </h4>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}