{"ast":null,"code":"import airports from \"../data/airports.json\";\nexport const findAirportByIata = async (iata) => {\n  return airports.find(airport => airport.iata === iata.toUpperCase());\n}; //\n// filteredAirports = response.data.filter((airport) => {\n//   airport.name === filters.name &&\n//     airport.iata === filters.iata &&\n//     airport.city === filters.city &&\n//     airport.country === filters.country;\n// });\n//\n\nconst getValue = value => typeof value === \"string\" ? value.toUpperCase() : value;\n\nexport const allAirports = async filters => {\n  // const filterByName = !!filters.name;\n  // const filterByIata = !!filters.iata;\n  // const filterByCity = !!filters.city;\n  // const filterByCountry = !!filters.country;\n  // let filteredAirports = []\n  // filteredAirports =  airports.filter((airport) => {\n  //   filterByName ? filters.name === airport.name\n  //   && filterByIata ? filters.iata === airport.iata\n  //   && filterByCity ? filters.city === airport.city\n  //   && filterByCountry ? filters.country === airport.country\n  // });\n  console.log(\"filters\", filters);\n  const filterKeys = Object.keys(filters);\n  let m = [];\n  m = airports.filter(item => {\n    // validates all filter criteria\n    return filterKeys.every(key => {\n      // ignores an empty filter\n      if (!filters[key].length) return true;\n      return filters[key].find(filter => getValue(filter) === getValue(item[key]));\n    });\n  });\n  console.log(\"m\", m); //return m;\n\n  return airports; //return filteredAirports;\n};\nexport const getAirportNames = async () => {\n  let names = [];\n  airports.map(airport => {\n    names.push({\n      name: airport.name\n    });\n  });\n  return names;\n};\nexport const getAirportIataList = async () => {\n  let airportIataList = [];\n  airports.map(airport => {\n    airportIataList.push({\n      name: airport.iata\n    });\n  });\n  return airportIataList;\n};\nexport const getCountries = async () => {\n  let countries = [];\n  airports.map(airport => {\n    countries.push({\n      name: airport.country\n    });\n  });\n  return countries;\n};\nexport const getCities = async () => {\n  let cities = [];\n  airports.map(airport => {\n    cities.push({\n      name: airport.city,\n      country: airport.country\n    });\n  });\n  return cities;\n};","map":{"version":3,"sources":["C:/Users/KogoKing/entrepreneur/github/maybe-finance/code-challenge-nextjs/models/airport.ts"],"names":["airports","findAirportByIata","iata","find","airport","toUpperCase","getValue","value","allAirports","filters","console","log","filterKeys","Object","keys","m","filter","item","every","key","length","getAirportNames","names","map","push","name","getAirportIataList","airportIataList","getCountries","countries","country","getCities","cities","city"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,uBAArB;AAOA,OAAO,MAAMC,iBAAiB,GAAG,OAC/BC,IAD+B,KAEE;AACjC,SAAOF,QAAQ,CAACG,IAAT,CAAeC,OAAD,IAAaA,OAAO,CAACF,IAAR,KAAiBA,IAAI,CAACG,WAAL,EAA5C,CAAP;AACD,CAJM,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IACf,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACF,WAAN,EAA5B,GAAkDE,KADpD;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAP,IAAuC;AAChE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;AACA,QAAMG,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYL,OAAZ,CAAnB;AACA,MAAIM,CAAC,GAAG,EAAR;AACAA,EAAAA,CAAC,GAAGf,QAAQ,CAACgB,MAAT,CAAiBC,IAAD,IAAU;AAC5B;AACA,WAAOL,UAAU,CAACM,KAAX,CAAkBC,GAAD,IAAS;AAC/B;AACA,UAAI,CAACV,OAAO,CAACU,GAAD,CAAP,CAAaC,MAAlB,EAA0B,OAAO,IAAP;AAC1B,aAAOX,OAAO,CAACU,GAAD,CAAP,CAAahB,IAAb,CACJa,MAAD,IAAYV,QAAQ,CAACU,MAAD,CAAR,KAAqBV,QAAQ,CAACW,IAAI,CAACE,GAAD,CAAL,CADpC,CAAP;AAGD,KANM,CAAP;AAOD,GATG,CAAJ;AAWAT,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBI,CAAjB,EA3BgE,CA4BhE;;AACA,SAAOf,QAAP,CA7BgE,CA+BhE;AACD,CAhCM;AAkCP,OAAO,MAAMqB,eAAe,GAAG,YAAoC;AACjE,MAAIC,KAAK,GAAG,EAAZ;AACAtB,EAAAA,QAAQ,CAACuB,GAAT,CAAcnB,OAAD,IAAa;AACxBkB,IAAAA,KAAK,CAACE,IAAN,CAAW;AAAEC,MAAAA,IAAI,EAAErB,OAAO,CAACqB;AAAhB,KAAX;AACD,GAFD;AAGA,SAAOH,KAAP;AACD,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAG,YAAoC;AACpE,MAAIC,eAAe,GAAG,EAAtB;AACA3B,EAAAA,QAAQ,CAACuB,GAAT,CAAcnB,OAAD,IAAa;AACxBuB,IAAAA,eAAe,CAACH,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAErB,OAAO,CAACF;AAAhB,KAArB;AACD,GAFD;AAGA,SAAOyB,eAAP;AACD,CANM;AAQP,OAAO,MAAMC,YAAY,GAAG,YAAoC;AAC9D,MAAIC,SAAS,GAAG,EAAhB;AACA7B,EAAAA,QAAQ,CAACuB,GAAT,CAAcnB,OAAD,IAAa;AACxByB,IAAAA,SAAS,CAACL,IAAV,CAAe;AAAEC,MAAAA,IAAI,EAAErB,OAAO,CAAC0B;AAAhB,KAAf;AACD,GAFD;AAGA,SAAOD,SAAP;AACD,CANM;AAQP,OAAO,MAAME,SAAS,GAAG,YAAoC;AAC3D,MAAIC,MAAM,GAAG,EAAb;AACAhC,EAAAA,QAAQ,CAACuB,GAAT,CAAcnB,OAAD,IAAa;AACxB4B,IAAAA,MAAM,CAACR,IAAP,CAAY;AAAEC,MAAAA,IAAI,EAAErB,OAAO,CAAC6B,IAAhB;AAAsBH,MAAAA,OAAO,EAAE1B,OAAO,CAAC0B;AAAvC,KAAZ;AACD,GAFD;AAGA,SAAOE,MAAP;AACD,CANM","sourcesContent":["import airports from \"../data/airports.json\";\r\nimport Airport from \"../types/airport\";\r\nimport Country from \"../types/country\";\r\nimport City from \"../types/city\";\r\nimport AirportName from \"../types/airport-name\";\r\nimport AirportIata from \"../types/airport-iata\";\r\n\r\nexport const findAirportByIata = async (\r\n  iata: string\r\n): Promise<Airport | undefined> => {\r\n  return airports.find((airport) => airport.iata === iata.toUpperCase());\r\n};\r\n\r\n//\r\n// filteredAirports = response.data.filter((airport) => {\r\n//   airport.name === filters.name &&\r\n//     airport.iata === filters.iata &&\r\n//     airport.city === filters.city &&\r\n//     airport.country === filters.country;\r\n// });\r\n//\r\nconst getValue = (value) =>\r\n  typeof value === \"string\" ? value.toUpperCase() : value;\r\n\r\nexport const allAirports = async (filters): Promise<Airport[]> => {\r\n  // const filterByName = !!filters.name;\r\n  // const filterByIata = !!filters.iata;\r\n  // const filterByCity = !!filters.city;\r\n  // const filterByCountry = !!filters.country;\r\n  // let filteredAirports = []\r\n\r\n  // filteredAirports =  airports.filter((airport) => {\r\n  //   filterByName ? filters.name === airport.name\r\n  //   && filterByIata ? filters.iata === airport.iata\r\n  //   && filterByCity ? filters.city === airport.city\r\n  //   && filterByCountry ? filters.country === airport.country\r\n  // });\r\n  console.log(\"filters\", filters);\r\n  const filterKeys = Object.keys(filters);\r\n  let m = [];\r\n  m = airports.filter((item) => {\r\n    // validates all filter criteria\r\n    return filterKeys.every((key) => {\r\n      // ignores an empty filter\r\n      if (!filters[key].length) return true;\r\n      return filters[key].find(\r\n        (filter) => getValue(filter) === getValue(item[key])\r\n      );\r\n    });\r\n  });\r\n\r\n  console.log(\"m\", m);\r\n  //return m;\r\n  return airports;\r\n\r\n  //return filteredAirports;\r\n};\r\n\r\nexport const getAirportNames = async (): Promise<AirportName[]> => {\r\n  let names = [];\r\n  airports.map((airport) => {\r\n    names.push({ name: airport.name });\r\n  });\r\n  return names;\r\n};\r\n\r\nexport const getAirportIataList = async (): Promise<AirportName[]> => {\r\n  let airportIataList = [];\r\n  airports.map((airport) => {\r\n    airportIataList.push({ name: airport.iata });\r\n  });\r\n  return airportIataList;\r\n};\r\n\r\nexport const getCountries = async (): Promise<AirportName[]> => {\r\n  let countries = [];\r\n  airports.map((airport) => {\r\n    countries.push({ name: airport.country });\r\n  });\r\n  return countries;\r\n};\r\n\r\nexport const getCities = async (): Promise<AirportName[]> => {\r\n  let cities = [];\r\n  airports.map((airport) => {\r\n    cities.push({ name: airport.city, country: airport.country });\r\n  });\r\n  return cities;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}